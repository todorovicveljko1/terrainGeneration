// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "Packages/jp.keijiro.noiseshader/Shader/SimplexNoise2D.hlsl"
#include "Packages/jp.keijiro.noiseshader/Shader/SimplexNoise3D.hlsl"

RWBuffer<float> DensityBuffer;
uint textureSize;
float3 chunkCoord;

uint sNumberOfLayers;
float sBaseAmplitude;
float sBaseFrequency;
float sAmplitudeMultiplier;
float sFrequencyMultiplier;

float sMinHeight;
float sHeightMult;


uint cNumberOfLayers;
float cBaseAmplitude;
float cBaseFrequency;
float cAmplitudeMultiplier;
float cFrequencyMultiplier;


float smin(float a, float b, float k) {
    float h = max( k-abs(a-b), 0.0 )/k;
    return min( a, b ) - h*h*k*(1.0/4.0);
}
int toIndex(int x,int y, int z){
    return x + y * textureSize + z * textureSize * textureSize;
}
float caveNoise(float3 pos){
    float temp = 1;
    float n;
    float base_f = cBaseFrequency;
    float base_a = cBaseAmplitude;
    for(uint j = 0; j < cNumberOfLayers; j++){
        n = (SimplexNoise((pos+chunkCoord) / 64 * base_f) + 1)/2;
        temp += (temp*base_a*n);
        
        temp = temp/(1+base_a);
        base_f *= cFrequencyMultiplier;
        base_a *= cAmplitudeMultiplier;
    }
    return temp;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{   
    if(id.x >= textureSize || id.y >= textureSize)
        return;
    float temp = 1;
    float base_f = sBaseFrequency;
    float base_a = sBaseAmplitude;
    float frequency = sFrequencyMultiplier;
    float amplitude = sAmplitudeMultiplier;
    for(uint i = 0; i < sNumberOfLayers; i++){
        float t = (SimplexNoise(float2((id.x + chunkCoord.x) / 128. * base_f,(id.y + chunkCoord.z) / 128. * base_f)) + 1) *0.5;
        temp += (base_a*t);
        
        temp = temp/(1+base_a);
        base_f *= frequency;
        base_a *= amplitude;
    }
    float hM = sMinHeight + temp * sHeightMult;
    float h = 0;
    float cave_noise = 0;
    for(i = 0 ; i < textureSize; i++ ){
        h = i + chunkCoord.y;
        if(hM - h > 0.){
            //DensityBuffer[toIndex(id.x,i,id.y)] = 1.;
            cave_noise = clamp(0.1+exp(-h)+caveNoise(float3(id.x,i,id.y)),0.,1.);
            if(cave_noise < 0.5){
                DensityBuffer[toIndex(id.x,i,id.y)] = cave_noise;
            }else if(cave_noise < 0.8 && hM - h > 2.){
                
                DensityBuffer[toIndex(id.x,i,id.y)] = cave_noise;
            }else{
                DensityBuffer[toIndex(id.x,i,id.y)] = min(hM - h,1.);
            }
        }else{
            DensityBuffer[toIndex(id.x,i,id.y)] = 0.;
        }
    }
}
